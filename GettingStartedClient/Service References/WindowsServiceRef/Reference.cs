//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GettingStartedClient.WindowsServiceRef {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://Microsoft.ServiceModel.Samples", ConfigurationName="WindowsServiceRef.ICalculator")]
    public interface ICalculator {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICalculator/AddMethod", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculator/AddMethodResponse")]
        double AddMethod(double n1, double n2);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://Microsoft.ServiceModel.Samples/ICalculator/AddMethod", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculator/AddMethodResponse")]
        System.IAsyncResult BeginAddMethod(double n1, double n2, System.AsyncCallback callback, object asyncState);
        
        double EndAddMethod(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICalculator/SubtractMethod", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculator/SubtractMethodResponse")]
        double SubtractMethod(double n1, double n2);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://Microsoft.ServiceModel.Samples/ICalculator/SubtractMethod", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculator/SubtractMethodResponse")]
        System.IAsyncResult BeginSubtractMethod(double n1, double n2, System.AsyncCallback callback, object asyncState);
        
        double EndSubtractMethod(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICalculator/MultiplyMethod", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculator/MultiplyMethodResponse")]
        double MultiplyMethod(double n1, double n2);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://Microsoft.ServiceModel.Samples/ICalculator/MultiplyMethod", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculator/MultiplyMethodResponse")]
        System.IAsyncResult BeginMultiplyMethod(double n1, double n2, System.AsyncCallback callback, object asyncState);
        
        double EndMultiplyMethod(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICalculator/DivideMethod", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculator/DivideMethodResponse")]
        double DivideMethod(double n1, double n2);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://Microsoft.ServiceModel.Samples/ICalculator/DivideMethod", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculator/DivideMethodResponse")]
        System.IAsyncResult BeginDivideMethod(double n1, double n2, System.AsyncCallback callback, object asyncState);
        
        double EndDivideMethod(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICalculatorChannel : GettingStartedClient.WindowsServiceRef.ICalculator, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddMethodCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddMethodCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public double Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((double)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SubtractMethodCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SubtractMethodCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public double Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((double)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MultiplyMethodCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public MultiplyMethodCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public double Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((double)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DivideMethodCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DivideMethodCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public double Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((double)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CalculatorClient : System.ServiceModel.ClientBase<GettingStartedClient.WindowsServiceRef.ICalculator>, GettingStartedClient.WindowsServiceRef.ICalculator {
        
        private BeginOperationDelegate onBeginAddMethodDelegate;
        
        private EndOperationDelegate onEndAddMethodDelegate;
        
        private System.Threading.SendOrPostCallback onAddMethodCompletedDelegate;
        
        private BeginOperationDelegate onBeginSubtractMethodDelegate;
        
        private EndOperationDelegate onEndSubtractMethodDelegate;
        
        private System.Threading.SendOrPostCallback onSubtractMethodCompletedDelegate;
        
        private BeginOperationDelegate onBeginMultiplyMethodDelegate;
        
        private EndOperationDelegate onEndMultiplyMethodDelegate;
        
        private System.Threading.SendOrPostCallback onMultiplyMethodCompletedDelegate;
        
        private BeginOperationDelegate onBeginDivideMethodDelegate;
        
        private EndOperationDelegate onEndDivideMethodDelegate;
        
        private System.Threading.SendOrPostCallback onDivideMethodCompletedDelegate;
        
        public CalculatorClient() {
        }
        
        public CalculatorClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CalculatorClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<AddMethodCompletedEventArgs> AddMethodCompleted;
        
        public event System.EventHandler<SubtractMethodCompletedEventArgs> SubtractMethodCompleted;
        
        public event System.EventHandler<MultiplyMethodCompletedEventArgs> MultiplyMethodCompleted;
        
        public event System.EventHandler<DivideMethodCompletedEventArgs> DivideMethodCompleted;
        
        public double AddMethod(double n1, double n2) {
            return base.Channel.AddMethod(n1, n2);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddMethod(double n1, double n2, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddMethod(n1, n2, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public double EndAddMethod(System.IAsyncResult result) {
            return base.Channel.EndAddMethod(result);
        }
        
        private System.IAsyncResult OnBeginAddMethod(object[] inValues, System.AsyncCallback callback, object asyncState) {
            double n1 = ((double)(inValues[0]));
            double n2 = ((double)(inValues[1]));
            return this.BeginAddMethod(n1, n2, callback, asyncState);
        }
        
        private object[] OnEndAddMethod(System.IAsyncResult result) {
            double retVal = this.EndAddMethod(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddMethodCompleted(object state) {
            if ((this.AddMethodCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddMethodCompleted(this, new AddMethodCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddMethodAsync(double n1, double n2) {
            this.AddMethodAsync(n1, n2, null);
        }
        
        public void AddMethodAsync(double n1, double n2, object userState) {
            if ((this.onBeginAddMethodDelegate == null)) {
                this.onBeginAddMethodDelegate = new BeginOperationDelegate(this.OnBeginAddMethod);
            }
            if ((this.onEndAddMethodDelegate == null)) {
                this.onEndAddMethodDelegate = new EndOperationDelegate(this.OnEndAddMethod);
            }
            if ((this.onAddMethodCompletedDelegate == null)) {
                this.onAddMethodCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddMethodCompleted);
            }
            base.InvokeAsync(this.onBeginAddMethodDelegate, new object[] {
                        n1,
                        n2}, this.onEndAddMethodDelegate, this.onAddMethodCompletedDelegate, userState);
        }
        
        public double SubtractMethod(double n1, double n2) {
            return base.Channel.SubtractMethod(n1, n2);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSubtractMethod(double n1, double n2, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSubtractMethod(n1, n2, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public double EndSubtractMethod(System.IAsyncResult result) {
            return base.Channel.EndSubtractMethod(result);
        }
        
        private System.IAsyncResult OnBeginSubtractMethod(object[] inValues, System.AsyncCallback callback, object asyncState) {
            double n1 = ((double)(inValues[0]));
            double n2 = ((double)(inValues[1]));
            return this.BeginSubtractMethod(n1, n2, callback, asyncState);
        }
        
        private object[] OnEndSubtractMethod(System.IAsyncResult result) {
            double retVal = this.EndSubtractMethod(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSubtractMethodCompleted(object state) {
            if ((this.SubtractMethodCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SubtractMethodCompleted(this, new SubtractMethodCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SubtractMethodAsync(double n1, double n2) {
            this.SubtractMethodAsync(n1, n2, null);
        }
        
        public void SubtractMethodAsync(double n1, double n2, object userState) {
            if ((this.onBeginSubtractMethodDelegate == null)) {
                this.onBeginSubtractMethodDelegate = new BeginOperationDelegate(this.OnBeginSubtractMethod);
            }
            if ((this.onEndSubtractMethodDelegate == null)) {
                this.onEndSubtractMethodDelegate = new EndOperationDelegate(this.OnEndSubtractMethod);
            }
            if ((this.onSubtractMethodCompletedDelegate == null)) {
                this.onSubtractMethodCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSubtractMethodCompleted);
            }
            base.InvokeAsync(this.onBeginSubtractMethodDelegate, new object[] {
                        n1,
                        n2}, this.onEndSubtractMethodDelegate, this.onSubtractMethodCompletedDelegate, userState);
        }
        
        public double MultiplyMethod(double n1, double n2) {
            return base.Channel.MultiplyMethod(n1, n2);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginMultiplyMethod(double n1, double n2, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginMultiplyMethod(n1, n2, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public double EndMultiplyMethod(System.IAsyncResult result) {
            return base.Channel.EndMultiplyMethod(result);
        }
        
        private System.IAsyncResult OnBeginMultiplyMethod(object[] inValues, System.AsyncCallback callback, object asyncState) {
            double n1 = ((double)(inValues[0]));
            double n2 = ((double)(inValues[1]));
            return this.BeginMultiplyMethod(n1, n2, callback, asyncState);
        }
        
        private object[] OnEndMultiplyMethod(System.IAsyncResult result) {
            double retVal = this.EndMultiplyMethod(result);
            return new object[] {
                    retVal};
        }
        
        private void OnMultiplyMethodCompleted(object state) {
            if ((this.MultiplyMethodCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.MultiplyMethodCompleted(this, new MultiplyMethodCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void MultiplyMethodAsync(double n1, double n2) {
            this.MultiplyMethodAsync(n1, n2, null);
        }
        
        public void MultiplyMethodAsync(double n1, double n2, object userState) {
            if ((this.onBeginMultiplyMethodDelegate == null)) {
                this.onBeginMultiplyMethodDelegate = new BeginOperationDelegate(this.OnBeginMultiplyMethod);
            }
            if ((this.onEndMultiplyMethodDelegate == null)) {
                this.onEndMultiplyMethodDelegate = new EndOperationDelegate(this.OnEndMultiplyMethod);
            }
            if ((this.onMultiplyMethodCompletedDelegate == null)) {
                this.onMultiplyMethodCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMultiplyMethodCompleted);
            }
            base.InvokeAsync(this.onBeginMultiplyMethodDelegate, new object[] {
                        n1,
                        n2}, this.onEndMultiplyMethodDelegate, this.onMultiplyMethodCompletedDelegate, userState);
        }
        
        public double DivideMethod(double n1, double n2) {
            return base.Channel.DivideMethod(n1, n2);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDivideMethod(double n1, double n2, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDivideMethod(n1, n2, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public double EndDivideMethod(System.IAsyncResult result) {
            return base.Channel.EndDivideMethod(result);
        }
        
        private System.IAsyncResult OnBeginDivideMethod(object[] inValues, System.AsyncCallback callback, object asyncState) {
            double n1 = ((double)(inValues[0]));
            double n2 = ((double)(inValues[1]));
            return this.BeginDivideMethod(n1, n2, callback, asyncState);
        }
        
        private object[] OnEndDivideMethod(System.IAsyncResult result) {
            double retVal = this.EndDivideMethod(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDivideMethodCompleted(object state) {
            if ((this.DivideMethodCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DivideMethodCompleted(this, new DivideMethodCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DivideMethodAsync(double n1, double n2) {
            this.DivideMethodAsync(n1, n2, null);
        }
        
        public void DivideMethodAsync(double n1, double n2, object userState) {
            if ((this.onBeginDivideMethodDelegate == null)) {
                this.onBeginDivideMethodDelegate = new BeginOperationDelegate(this.OnBeginDivideMethod);
            }
            if ((this.onEndDivideMethodDelegate == null)) {
                this.onEndDivideMethodDelegate = new EndOperationDelegate(this.OnEndDivideMethod);
            }
            if ((this.onDivideMethodCompletedDelegate == null)) {
                this.onDivideMethodCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDivideMethodCompleted);
            }
            base.InvokeAsync(this.onBeginDivideMethodDelegate, new object[] {
                        n1,
                        n2}, this.onEndDivideMethodDelegate, this.onDivideMethodCompletedDelegate, userState);
        }
    }
}
